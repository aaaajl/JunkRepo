Thread 
	-yield:Causes the currently executing thread object to temporarily pause and allow other threads to execute
	-sleep:Causes the currently executing thread to sleep but does not lose ownership of any monitors.
	-interrupted:Tests whether the current thread has been interrupted. The interrupted status of the thread is cleared by this method. 
	 In other words, if this method were to be called twice in succession, the second call would return false (unless the current thread were interrupted again, 
	 after the first call had cleared its interrupted status and before the second call had examined it). 
	-join: Wait for this thread to die.
	-holdsLock:Returns true if and only if the current thread holds the monitor lock on the specified object. 
Thread.State
	-NEW: A thread that has not yet started is in this state. 
	-RUNNABLE: A thread executing in the Java virtual machine is in this state. 
	-BLOCKED: A thread that is blocked waiting for a monitor lock is in this state. 
	-WAITING: A thread that is waiting indefinitely for another thread to perform a particular action is in this state. 
	-TIMED_WAITING: A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state. 
	-TERMINATED: A thread that has exited is in this state. 
	
synchronization is good, but not perfect. It has some functional limitations: 
1.it is not possible to interrupt a thread that is waiting to acquire a lock, 
  nor is it possible to poll for a lock or attempt to acquire a lock without being willing to wait forever for it. 
2.Synchronization also requires that locks be released in the same stack frame in which they were acquired, 
  which most of the time is the right thing (and interacts nicely with exception handling), 
  but a small number of cases exist where non-block-structured locking can be a big win.
What do we mean by a reentrant lock? 
-Simply that there is an acquisition count associated with the lock, 
 and if a thread that holds the lock acquires it again, the acquisition count is incremented and the lock then needs to 
 be released twice to truly release the lock.

Fair lock has worse performance than synchronization

When chose synchronization over lock
1.Coding easier, don't need explicitly release.
2.JVM include locking information when thread dump, ReentrantLock can't be record.

When chose Lock over synchronization
 use it when you actually need something it provides that synchronized doesn't, like timed lock waits, interruptible lock waits, 
 non-block-structured locks, multiple condition variables, or lock polling.
	
ConcurrentHashMap 是一个并发散列映射表的实现，它允许完全并发的读取，并且支持给定数量的并发更新。相比于 HashTable 和用同步包装器包装的 HashMap（Collections.synchronizedMap(new HashMap())），ConcurrentHashMap 拥有更高的并发性。在 HashTable 和由同步包装器包装的 HashMap 中，使用一个全局的锁来同步不同线程间的并发访问。同一时间点，只能有一个线程持有锁，也就是说在同一时间点，只能有一个线程能访问容器。这虽然保证多线程间的安全并发访问，但同时也导致对容器的访问变成串行化的了。
在使用锁来协调多线程间并发访问的模式下，减小对锁的竞争可以有效提高并发性。有两种方式可以减小对锁的竞争：
减小请求 同一个锁的 频率。
减少持有锁的 时间。
ConcurrentHashMap 的高并发性主要来自于三个方面：
用分离锁实现多个线程间的更深层次的共享访问。
用 HashEntery 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。
通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。
使用分离锁，减小了请求 同一个锁的频率。
通过 HashEntery 对象的不变性及对同一个 Volatile 变量的读 / 写来协调内存可见性，使得 读操作大多数时候不需要加锁就能成功获取到需要的值。由于散列映射表在实际应用中大多数操作都是成功的 读操作，所以 2 和 3 既可以减少请求同一个锁的频率，也可以有效减少持有锁的时间。
通过减小请求同一个锁的频率和尽量减少持有锁的时间 ，使得 ConcurrentHashMap 的并发性相对于 HashTable 和用同步包装器包装的 HashMap有了质的提高。

CAS Compare and Swap
CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。
nonblocking algorithms  一个线程的失败或者挂起不应该影响其他线程的失败或挂起的算法。

AbstractQueuedSynchronizer

Gossip protocol
	-Dissemination protocols
	-Anti-entropy protocal
	-Protocols that compute aggregates
